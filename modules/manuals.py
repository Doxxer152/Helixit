# Manual
'''
.manual</code> <code>.add_manual</code>:: –í—ã–≤–æ–¥–∏—Ç –º–∞–Ω—É–∞–ª—ã. \n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ <code>.manual - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –º–∞–Ω—É–∞–ª–æ–≤</code> \n<code>.manual (–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–Ω—É–∞–ª–∞)</code> <i>- –í—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–Ω—É–∞–ª–∞</i> \n<code>.add_manual + –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º</code> - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –º–∞–Ω—É–∞–ª –≤ —É—Ç–∏–ª–∏—Ç—É
'''
from asyncio import sleep
from telethon import events
import asyncio
import os


def a(client):
	@client.on(events.NewMessage(pattern=r"\.manual", outgoing=True))
	async def manual(event):
		args = event.text.split(' ')

		if len(args) == 1:
			manuals = '\n'.join(f"¬∑<code>{file.replace('.txt','')}</code>" for file in os.listdir('manuals'))

			text_to_send = f"<b>üõú –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–Ω—É–∞–ª–æ–≤:</b>\n{manuals}\n\n<b>üëÅ‚Äçüó®–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ –º–∞–Ω—É–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b>\n<code>.manual –Ω–∞–∑–≤–∞–Ω–∏–µ–º–∞–Ω—É–∞–ª–∞</code>"
			await event.edit(text_to_send, parse_mode='html')
		else:
			filename = args[-1]+".txt"

			if not filename in os.listdir("manuals"):
				await event.edit("<b>‚ùå–§–∞–π–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É </b><code>.manuals</code><b> —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–Ω—É–∞–ª–æ–≤</b>")
				return
			else:
				content = open(f"manuals/{filename}",'r',encoding='utf-8').read()
				if len(content) > 4000:
					await event.delete()
					await client.send_file(
						event.to_id,
						file=f'manuals/{filename}',
						caption=f"<b>üì¶–¢–µ–∫—Å—Ç –º–∞–Ω—É–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–º –∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª–æ–º \n\nüìß–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –æ—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ª—é–±–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞!</b>",
						parse_mode='html')
				else:
					await event.edit(f"<b>üì¶–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞–Ω—É–∞–ª–∞:</b>\n\n<code>{content}</code>",parse_mode='html')

	@client.on(events.NewMessage(pattern=r"\.add_manual", outgoing=True))
	async def add_manual(event):
		reply = await event.get_reply_message()
		if reply.media.document:
			await client.download_media(reply.media.document, 'manuals/')
			await event.edit("<b>üì• –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>", parse_mode='html')
		else:
			await event.edit("<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç!</b>")
			return



if __name__ == '__main__':
	try:
		a(client)
	except:
		pass