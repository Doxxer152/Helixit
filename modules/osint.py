# Osint
'''
.ip</code> <code>.mail</code> <code>.phone</code>:: –ü—Ä–æ–±–∏–≤. \n\n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</b>: \n<code>.phone 79xxxxxx</code> <i>–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É</i>\n<code>.mail –ø–æ—á—Ç–∞@–ø–æ—á—Ç–∞.—Ö—Ö—Ö</code> <i>–ø–æ–∏—Å–∫ –ø–æ –ø–æ—á—Ç–µ</i>\n<code>.ip 123.255.123.123</code> <i>- –ø–æ–∏—Å–∫ –ø–æ –∞–π–ø–∏ –∞–¥—Ä–µ—Å—É</i>
'''

from telethon import events
import asyncio
import requests, json
import subprocess


def a(client):

    @client.on(events.NewMessage(pattern=r"\.ip", outgoing=True))
    async def _3(event):

        args = event.text.split(' ')
        if len(args) <2:
            await event.edit('<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å IP! \n–ü—Ä–∏–º–µ—Ä:</b>\n<code>.ip 123.456.789.021</code>', parse_mode='html')
            return
        else:
            ip = args[-1]

        data = requests.get(f"http://ipwho.is/{ip}").json()

        if data['success']:
            await event.edit(
                f"<b>‚ö°Ô∏è–¶–µ–ª—å:</b> <code>{ip}</code>"
                f"\n\n<b>‚îúüóÑ –ü—Ä–æ–≤–∞–π–¥–µ—Ä (ISP):</b> <code>{data['connection']['isp']}</code>"
                f"\n<b>‚îú‚öôÔ∏è –¢–∏–ø:</b> <code>{data['type']}</code>"
                f"\n<b>‚îú{data['flag']['emoji']} –°—Ç—Ä–∞–Ω–∞:</b> <code>{data['country']}</code>"
                f"\n<b>‚îúüåá –ì–æ—Ä–æ–¥:</b> <code>{data['city']}</code>"
                f"\n<b>‚îúüìå –†–µ–≥–∏–æ–Ω:</b> <code>{data['region']}</code>"
                f"\n<b>‚îúüìÆ –ü–æ—á—Ç–æ–≤—ã–π –∫–æ–¥:</b> <code>{data['postal']}</code>"
                f"\n<b>‚îúüìç –®–∏—Ä–æ—Ç–∞:</b> <code>{data['latitude']}</code>"
                f"\n<b>‚îîüìç –î–æ–ª–≥–æ—Ç–∞:</b> <code>{data['longitude']}</code>"
                f'''\n\n‚îî<b>üó∫ –ö–∞—Ä—Ç—ã:</b> <a href="https://www.google.com/maps/place/{data['latitude']}+{data['longitude']}">—Å—Å—ã–ª–∫–∞</a>''',
                parse_mode='html')
        else:
            await event.edit("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP!</b>",parse_mode='html')

    @client.on(events.NewMessage(pattern=r"\.phone", outgoing=True))
    async def _4(event):

        args = event.text.split(' ')
        if len(args) <2:
            await event.edit('<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞! \n–ü—Ä–∏–º–µ—Ä:</b>\n<code>.phone +788005553535</code>', parse_mode='html')
            return
        else:
            phone = args[-1].replace(' ','')
            response = requests.get(f"https://htmlweb.ru/geo/api.php?json&telcod={phone}")
            data = json.loads(response.content)
            
            limit = data['limit']
                        
            if limit == 0:
                await event.edit("<b>‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–∏—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å VPN –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É!</b>",parse_mode='html')
            else:
                if 'message' in data:
                    text = "<code>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º</code>"
                    await event.edit(
                        f"<b>‚ö°Ô∏è –¶–µ–ª—å:</b> <code>{phone}</code>"
                        f"\n\n<b>‚îî–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ:</b> <code>{text}</code>",
                        parse_mode='html'
                    )

                else:
                    operator = data['0']['oper']
                    operator_brand = data['0']['oper_brand']
                    country = data['country']['name']
                    location = data['country']['location']
                    iso = data['country']['iso']
                    capital = data['capital']['name']
                    latitude = data['capital']['latitude']
                    longitude = data['capital']['longitude']
                    timezone = data['capital']['tz']

                    await event.edit(
                        f"<b>‚ö°Ô∏è–¶–µ–ª—å:</b> <code>{phone}</code>"
                        f"\n\n<b>‚îúüìû –û–ø–µ—Ä–∞—Ç–æ—Ä:</b> <code>{operator}</code>"
                        f"\n<b>‚îúüè∑ –ë—Ä–µ–Ω–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:</b> <code>{operator_brand}</code>"
                        f"\n<b>‚îúüßøISO:</b> <code>{iso}</code>"
                        f"\n<b>‚îúüè¥‚Äç‚ò†Ô∏è–°—Ç—Ä–∞–Ω–∞</b>:<code>{country}</code>"
                        f"\n<b>‚îúüåç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> <code>{location}</code>"
                        f"\n<b>‚îúüèô –°—Ç–æ–ª–∏—Ü–∞:</b> <code>{capital}</code>"
                        f"\n<b>‚îúüåê –®–∏—Ä–æ—Ç–∞:</b> <code>{latitude}</code>"
                        f"\n<b>‚îúüåê –î–æ–ª–≥–æ—Ç–∞:</b> <code>{longitude}</code>"
                        f"\n<b>‚îúüó∫ –ö–∞—Ä—Ç—ã:</b> <a href=\"https://www.google.com/maps/place/{latitude}+{longitude}\">—Å—Å—ã–ª–∫–∞</a>"
                        f"\n‚îî<b>‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> <code>{timezone}</code>"
                        f"\n\n<b>üö´ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤</b>:<code>{limit}</code>"
                        f"\nüõú:<code>–ï—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã, –ø—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∏—Ç–µ VPN</code>",
                        parse_mode='html'
                    )



    @client.on(events.NewMessage(pattern=r"\.mail", outgoing=True))
    async def _5(event):

        args = event.text.split(' ')
        if len(args) <2:
            await event.edit('<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π! \n–ü—Ä–∏–º–µ—Ä:</b>\n<code>.phone example@mail.ru <used></code>', parse_mode='html')
            return
        else:
            mail = args[1]
            used = '--only-used' if len(args) == 3 and args[2] == 'used' else ''
            await event.edit("<b>üîé –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—á—Ç–µ...</b>", parse_mode='html')

            result = subprocess.run(f"holehe {mail} {used}", capture_output=True, text=True, check=True)
            result.stdout = "\n".join(result.stdout.split("\n")[4:])
            result.stdout = "\n".join(result.stdout.split("\n")[:-4])
            result.stdout = "\n".join([f"{line}" if "[+]" in line else line for line in result.stdout.split("\n")])
            result.stdout = "\n".join([f"{line}" if "[-]" in line else line for line in result.stdout.split("\n")])
            result.stdout = "\n".join([f"{line}" if "[x]" in line else line for line in result.stdout.split("\n")])

            message = str(result.stdout)

            message = message.replace(",",'')
            message = message.replace("[x]",'üìõ')
            message = message.replace("[-]","‚ùå")
            message = message.replace("[+]","‚úÖ")
            message = message.replace("Email used","<b>- –ü–æ—á—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞</b>\n")
            message = message.replace("Email not used","<b>- –ü–æ—á—Ç–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞</b>\n")
            message = message.replace("Rate limit","<b>- –†–µ–π—Ç –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</b>\n\n")
            message = message.replace("websites checked in","–≤–µ–±—Å–∞–π—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∑–∞")
            message = message.replace("seconds","—Å–µ–∫")


            await event.edit(message, parse_mode='html')



if __name__ == '__main__':
    try:
        a(client)
    except Exception as e:
        print(e)
        pass
