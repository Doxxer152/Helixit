# Short
'''
.short</code>:: –°–æ–∫—Ä–∞—Ç–∏—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫. \n\n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</b>: \n<code>.short <—Å—Å—ã–ª–∫–∞></code> <i>–°–æ–∫—Ä–∞—Ç–∏—Ç —Å—Å—ã–ª–∫—É</i>\n\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n<code>.short google.com</code>
'''

from telethon import events
import asyncio
import requests, json
import subprocess


def a(client):

    @client.on(events.NewMessage(pattern=r"\.short", outgoing=True))
    async def _1(event):

        args = event.text.split(' ')
        if len(args) <2:
            await event.edit('<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å URL! \n\n–ü—Ä–∏–º–µ—Ä:</b>\n<code>.short google.com</code>', parse_mode='html')
            return
        else:
            url = args[-1]

        data = requests.get(f"https://is.gd/create.php?format=simple&url={url}").text
        if 'is.gd' in data:
            await event.edit(f"<b>üóØ –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n‚û§ <code>{data}</code>", parse_mode='html')
        elif "block" in data:
            await event.edit('<b>‚ùå URL –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É</b>', parse_mode='html')

        else:
            await event.edit('<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å URL! \n\n–ü—Ä–∏–º–µ—Ä:</b>\n<code>.short google.com</code>', parse_mode='html')


if __name__ == '__main__':
    try:
        a(client)
    except Exception as e:
        print(e)
        pass